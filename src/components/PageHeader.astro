---
import { Avatar, Breadcrumbs, BreadcrumbsItem } from 'accessible-astro-components'
import sanitizeHtml from 'sanitize-html'

/**
 * PageHeader Component
 *
 * @description PageHeader description
 */
interface Props {
  /**
   * Additional classes to apply to the PageHeader
   */
  class?: string
  /**
   * The featured image of the page (string path)
   */
  featuredImage?: string
  /**
   * The title of the page
   */
  title: string
  /**
   * The subtitle of the page
   * @description Can contain HTML content (will be sanitized)
   */
  subtitle?: string
  /**
   * The background color of the page header
   * @type {'primary' | 'secondary' | 'neutral' | 'gradient' | 'bordered' | undefined}
   * @default undefined - Uses the default background color
   */
  /**
   * The author of the page
   */
  author?: {
    name: string
    image: string
    bio: string
  }
  /**
   * Project metadata for case studies
   */
  projectMeta?: {
    dateStart?: Date
    dateEnd?: Date
    tags?: string[]
  }
  bgType?: 'primary' | 'secondary' | 'neutral' | 'gradient' | 'bordered'
  /**
   * Whether to show the breadcrumbs
   */
  showBreadcrumbs?: boolean
}

const { class: className, title, subtitle, bgType, showBreadcrumbs = true, featuredImage, author, projectMeta } = Astro.props

// Sanitize subtitle HTML if present
const sanitizedSubtitle: string = subtitle
  ? sanitizeHtml(subtitle, {
      allowedTags: ['b', 'i', 'em', 'strong', 'a', 'span', 'br'],
      allowedAttributes: {
        a: ['href', 'title', 'target', 'rel'],
        span: ['class'],
      },
    })
  : ''
---

<section class:list={[className, 'page-header']}>
  <div class="container my-3">
    {
      showBreadcrumbs &&
        (() => {
          const path = Astro.url.pathname
          const segments = path.split('/').filter(Boolean)

          if (segments.length === 0) {
            return null // No breadcrumbs on homepage
          }

          return (
            <Breadcrumbs>
              <BreadcrumbsItem href="/" label="Home" />
              {segments.map((segment, index) => {
                const url = `/${segments.slice(0, index + 1).join('/')}`
                const isLast = index === segments.length - 1
                const formattedName = segment
                  .split('-')
                  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                  .join(' ')

                return <BreadcrumbsItem href={isLast ? undefined : url} label={formattedName} currentPage={isLast} />
              })}
            </Breadcrumbs>
          )
        })()
    }
  </div>
  <div class:list={['py-16', bgType && `bg-${bgType}`]}>
    <div class="space-content container">
      {
        featuredImage && (
          <div class="featured-image-container mb-8">
            <img
              src={featuredImage}
              alt={title}
              class="h-[250px] w-full rounded-lg object-cover"
              loading="eager"
            />
          </div>
        )
      }
      <h1>{title}</h1>
      {sanitizedSubtitle && <p class="text-2xl" set:html={sanitizedSubtitle} />}
      {
        author && (
          <div class="mt-6">
            {/* Standard Avatar für Portfolio ohne Projekt-Meta */}
            {!projectMeta ? (
              <div class="flex items-center">
                <Avatar title={author.name} image={author.image} subtitle={author.bio} />
              </div>
            ) : (
              /* Erweiterte Projekt-Info für Case Studies */
              <div class="flex flex-col md:flex-row gap-6 items-start">
                
                {/* Links: Firma, Logo, Rolle */}
                <div class="flex items-center gap-4">
                  <img 
                    src={author.image} 
                    alt={`${author.name} Logo`}
                    class="w-16 h-16 rounded-full object-cover border-2 border-gray-200"
                  />
                  <div>
                    <h3 class="text-lg font-semibold text-gray-900">{author.name}</h3>
                    <p class="text-sm text-gray-600">{author.bio}</p>
                  </div>
                </div>
                
                {/* Rechts: Zeitraum und Tags */}
                <div class="flex flex-col gap-4 md:ml-auto">
                  
                  {/* Zeitraum */}
                  {(projectMeta.dateStart || projectMeta.dateEnd) && (
                    <div class="bg-white px-4 py-3 rounded-lg shadow-sm border border-gray-200">
                      <h4 class="text-sm font-semibold text-gray-700 mb-1">Zeitraum</h4>
                      <p class="text-gray-900">
                        {projectMeta.dateStart && new Date(projectMeta.dateStart).toLocaleDateString('de-DE')}
                        {projectMeta.dateStart && projectMeta.dateEnd && ' - '}
                        {projectMeta.dateEnd && new Date(projectMeta.dateEnd).toLocaleDateString('de-DE')}
                      </p>
                    </div>
                  )}
                  
                  {/* Tags */}
                  {projectMeta.tags && projectMeta.tags.length > 0 && (
                    <div class="bg-white px-4 py-3 rounded-lg shadow-sm border border-gray-200">
                      <h4 class="text-sm font-semibold text-gray-700 mb-2">Technologien & Skills</h4>
                      <div class="flex flex-wrap gap-2">
                        {projectMeta.tags.map(tag => (
                          <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                </div>
              </div>
            )}
          </div>
        )
      }
    </div>
  </div>
</section>

<style>
  .page-header {
    .bg-primary {
      background-color: light-dark(var(--color-primary-100), var(--color-primary-500));
    }

    .bg-secondary {
      background-color: light-dark(var(--color-secondary-100), var(--color-secondary-500));
    }

    .bg-neutral {
      background-color: light-dark(var(--color-neutral-300), var(--color-neutral-800));
    }

    .bg-gradient {
      background-image: linear-gradient(
        315deg,
        light-dark(var(--color-primary-100), var(--color-secondary-100)) 25%,
        light-dark(var(--color-secondary-100), var(--color-primary-200))
      );
      color: var(--color-neutral-900);
    }

    .bg-bordered {
      border: 1px solid var(--border-color-subtle);
      border-inline: 0;
    }

    .featured-image-container {
      max-height: 500px;
      overflow: hidden;
    }
  }
</style>