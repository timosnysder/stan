---
// src/pages/case-studies/[slug].astro
import { getCollection, render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import SocialShares from '@components/SocialShares.astro'
import { Icon } from 'astro-icon/components'

export async function getStaticPaths() {
  const caseStudies = await getCollection('casestudies')
  
  // Sortiere Case Studies nach Datum (neueste zuerst)
  const sortedCaseStudies = caseStudies.sort((a: CollectionEntry<'casestudies'>, b: CollectionEntry<'casestudies'>) => {
    const dateA = a.data.date_end ? new Date(a.data.date_end).getTime() : (a.data.date_start ? new Date(a.data.date_start).getTime() : 0)
    const dateB = b.data.date_end ? new Date(b.data.date_end).getTime() : (b.data.date_start ? new Date(b.data.date_start).getTime() : 0)
    return dateB - dateA // Neueste zuerst
  })
  
  return sortedCaseStudies.map((entry: CollectionEntry<'casestudies'>, index: number) => {
    // Finde vorherige und nächste Case Study
    const prevCaseStudy = index > 0 ? sortedCaseStudies[index - 1] : null
    const nextCaseStudy = index < sortedCaseStudies.length - 1 ? sortedCaseStudies[index + 1] : null
    
    return {
      params: { slug: entry.id.replace('.mdx', '') },
      props: { 
        entry,
        prevCaseStudy,
        nextCaseStudy
      },
    }
  })
}

interface Props {
  entry: CollectionEntry<'casestudies'>
  prevCaseStudy: CollectionEntry<'casestudies'> | null
  nextCaseStudy: CollectionEntry<'casestudies'> | null
}

const { entry, prevCaseStudy, nextCaseStudy }: Props = Astro.props
const { Content } = await render(entry)

// Author Info für PageHeader (falls kein projectMeta verwendet wird)
const author = {
  name: entry.data.client || 'Case Study',
  image: entry.data.client_logo || '/images/test.jpg',
  bio: entry.data.myrole || 'UX/UI Designer & Konzepter',
}

// Projekt-Metadaten für PageHeader - alle relevanten Daten übergeben
const projectMeta = {
  dateStart: entry.data.date_start,
  dateEnd: entry.data.date_end,
  tags: entry.data.tags,
  clientLogo: entry.data.client_logo,
  industrie: entry.data.client_industrie,
  myRole: entry.data.myrole,
  client: entry.data.client, // Client-Name explizit übergeben
}

// Featured Image: Verwende featuredImage falls vorhanden, sonst image als Fallback
const featuredImage = entry.data.featuredImage || entry.data.image
---

<DefaultLayout title={`${entry.data.title} - Case Study`} description={entry.data.description} url={entry.data.title}>
  
  <!-- PageHeader mit allen Meta-Informationen -->
  <PageHeader
    title={entry.data.title}
    subtitle={entry.data.description}
    author={author}
    projectMeta={projectMeta}
    bgType="bordered"
    featuredImage={featuredImage}
  />
  
  <!-- Content Section - Nur der MDX Inhalt -->
  <section class="my-12">
    <div class="narrow space-content container">
      <Content />
    </div>
  </section>
  
  <!-- Share Section -->
  <section class="my-12">
    <div class="narrow space-content container">
      <h2>Diese Case Study teilen</h2>
      <p>Gefällt Ihnen diese Case Study? Teilen Sie sie mit Ihrem Netzwerk!</p>
      <SocialShares />
    </div>
  </section>
  
  <!-- Navigation Section -->
  <section class="navigation-section">
    <div class="container">
      
      <!-- Case Study Navigation -->
      <div class="navigation-grid">
        
        <!-- Vorherige Case Study (Links) -->
        <div class="cta">
          {prevCaseStudy ? (
            <a 
              href={`/case-studies/${prevCaseStudy.id.replace('.mdx', '')}`}
              class="button has-icon color-secondary"
            >
              <Icon name="lucide:arrow-left" />
              
              <span class="nav-title">{prevCaseStudy.data.title}</span>
              {/* {prevCaseStudy.data.date_end && (

              )} */}
            </a>
          ) : (
            <div class="nav-placeholder">Keine vorherige Case Study</div>
          )}
        </div>
        
        <!-- Zurück zu allen (Zentrum) -->
        <!-- <div class="my-16 flex justify-center">
          <a class="button has-icon color-secondary" href="/case-studies">
            <Icon name="lucide:arrow-right" />
            Alle Case Studies ansehen
          </a>
        </div>
         -->
        <!-- Nächste Case Study (Rechts) -->
        <div class="cta">
          {nextCaseStudy ? (
            <a 
              href={`/case-studies/${nextCaseStudy.id.replace('.mdx', '')}`}
              class="button has-icon color-secondary"
            >
              
              <span class="nav-title">{nextCaseStudy.data.title}</span>
              <Icon name="lucide:arrow-right" />
              {/* {nextCaseStudy.data.date_end && (
                <span class="nav-date">
                  {new Date(nextCaseStudy.data.date_end).toLocaleDateString('de-DE')}
                </span>
              )} */}
            </a>
          ) : (
            <div class="nav-placeholder">Keine nächste Case Study</div>
          )}
        </div>
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  .narrow {
    margin-inline: auto;
    max-width: 65ch;
  }

  /* Navigation Section */
  .navigation-section {
    padding: 4rem 0;
  }

  .navigation-grid {
    display: flex;
    justify-content: space-between;
    grid-template-columns: 1fr;
    gap: 2rem;
    align-items: center;
    margin-bottom: 3rem;

    // @media (min-width: 768px) {
    //   grid-template-columns: 1fr auto 1fr;
    //   gap: 2rem;
    // }
  }

  /* Navigation Items */
  .nav-item {
    display: flex;
  }

  .nav-prev {
    justify-content: flex-start;
  }

  .nav-center {
    justify-content: center;
  }

  .nav-next {
    justify-content: flex-end;
  }

  .nav-link {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    border-radius: 8px;
    text-decoration: none;
    transition: background-color 0.2s ease;
    color: #374151;

    &:hover {
      background-color: #f3f4f6;
    }
  }

  .nav-link-prev {
    align-items: flex-start;
    text-align: left;
  }

  .nav-link-next {
    align-items: flex-end;
    text-align: right;
  }

  .nav-direction {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.25rem;
  }

  .nav-title {
    font-weight: 600;
    font-size: 1rem;
    margin-bottom: 0.25rem;
  }

  .nav-date {
    font-size: 0.75rem;
    color: #9ca3af;
  }

  .nav-placeholder {
    color: #d1d5db;
    font-size: 0.875rem;
  }

  /* Buttons */
  .btn-primary {
    display: inline-block;
    background-color: #2563eb;
    color: white;
    padding: 0.75rem 2rem;
    border-radius: 8px;
    font-weight: 500;
    text-decoration: none;
    transition: background-color 0.2s ease;

    &:hover {
      background-color: #1d4ed8;
    }
  }

  .bottom-nav {
    text-align: center;
    padding-top: 2rem;
    border-top: 1px solid #e5e7eb;
  }

  /* Dark Mode */
  :global(.darkmode) {
    .nav-link {
      color: #e5e7eb;

      &:hover {
        background-color: #374151;
      }
    }

    .nav-direction {
      color: #e5e7eb;
    }

    .nav-date {
      color: #e5e7eb;
    }

    .nav-placeholder {
      color: #e5e7eb;
    }

    .bottom-nav {
      border-top-color: #4b5563;
    }
  }
</style>
</style>