---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import { Icon } from 'astro-icon/components'
import Hero from '@components/Hero.astro'
import Feature from '@components/Feature.astro'
import Counter from '@components/Counter.astro'
import ContentMedia from '@components/ContentMedia.astro'
import FrontpageCard from '@components/FrontpageCard.astro'
import ExternalLink from '@components/ExternalLink.astro'
import { Accordion, AccordionItem, Avatar, AvatarGroup } from 'accessible-astro-components'
import { getCollection } from 'astro:content'

// Hole alle Case Studies und implementiere Featured-Logik
const allCaseStudies = await getCollection('casestudies')

// Zeige zuerst featured Case Studies, dann die neuesten
const featuredCaseStudies = allCaseStudies.filter(cs => cs.data.featured === true)
const nonFeaturedCaseStudies = allCaseStudies.filter(cs => cs.data.featured !== true)

// Sortiere beide Gruppen nach Datum
const sortByDate = (a, b) => {
  const dateA = a.data.date_end ? new Date(a.data.date_end).getTime() : (a.data.date_start ? new Date(a.data.date_start).getTime() : 0)
  const dateB = b.data.date_end ? new Date(b.data.date_end).getTime() : (b.data.date_start ? new Date(b.data.date_start).getTime() : 0)
  return dateB - dateA
}

const sortedFeatured = featuredCaseStudies.sort(sortByDate)
const sortedNonFeatured = nonFeaturedCaseStudies.sort(sortByDate)

// Kombiniere: Featured zuerst, dann die neuesten non-featured
const recentCaseStudies = [...sortedFeatured, ...sortedNonFeatured].slice(0, 3)
---

<DefaultLayout title="Home">
  <Hero />

  <!-- Case Studies Sektion -->
  <section class="my-48">
    <div class="container">
      <h2 class="text-6xl mb-12">Case Studies</h2>
      
      <div class="case-studies-container">
        {recentCaseStudies.map((caseStudy, index) => (
          <FrontpageCard
            title={caseStudy.data.title}
            description={caseStudy.data.description}
            imgSrc={caseStudy.data.image}
            url={`/case-studies/${caseStudy.id.replace('.mdx', '')}`}
            reverseImg={index % 2 === 1}
            client={caseStudy.data.client}
            tags={caseStudy.data.tags}
            imageAlt={`${caseStudy.data.title} Case Study Image`}
          />
        ))}
      </div>

      <!-- Link to all case studies -->
      <div class="my-16 flex justify-center">
        <a class="button has-icon color-secondary" href="/case-studies">
          <Icon name="lucide:arrow-right" />
          Alle Case Studies ansehen
        </a>
      </div>
    </div>
  </section>

  <!-- Rest deiner Seite bleibt gleich... -->
  <section class="my-48">
    <div class="container grid grid-cols-1 gap-12 md:grid-cols-2">
      <div class="flex flex-col items-start gap-4">
        <h2 class="text-6xl">FAQ</h2>
        <p class="text-2xl">
          This section demonstrates how to effectively use the Accordion component to organize and display frequently
          asked questions in an accessible and user-friendly way.
        </p>
        <a class="button" href="/faq">Contact support team</a>
      </div>
      <div class="space-content">
        <Accordion>
          <AccordionItem name="exclusive" title="What is WCAG and why is it important?" open>
            <p>
              WCAG (Web Content Accessibility Guidelines) is a set of internationally recognized standards for web
              accessibility. Following WCAG ensures your website is usable by people with various disabilities,
              including visual, auditory, physical, and cognitive impairments. It's important not just for
              accessibility, but also for legal compliance, SEO, and reaching a wider audience.
            </p>
          </AccordionItem>
          <AccordionItem name="exclusive" title="What's the difference between ARIA labels and alt text?">
            <p>
              Alt text is specifically for describing images to screen reader users, while ARIA labels (aria-label,
              aria-labelledby) can describe any element on a page. Alt text is HTML's native way to provide alternative
              text for images, while ARIA labels are part of the ARIA specification that helps make dynamic content and
              advanced UI controls more accessible.
            </p>
          </AccordionItem>
          <AccordionItem name="exclusive" title="Why is keyboard navigation important?">
            <p>
              Keyboard navigation is essential for users who can't use a mouse, including people with motor
              disabilities, visual impairments, or those who simply prefer keyboard controls. A website should be fully
              operable using only a keyboard, with visible focus indicators and logical tab order. This includes being
              able to access all interactive elements and navigate through content efficiently.
            </p>
          </AccordionItem>
          <AccordionItem name="exclusive" title="What is a sufficient color contrast ratio?">
            <p>
              According to WCAG 2.2 AA standards, text should have a minimum contrast ratio of 4.5:1 against its
              background for regular text, and 3:1 for large text (18pt or 14pt bold). For non-text elements like icons
              or buttons, a minimum ratio of 3:1 is required. This ensures content is readable for users with visual
              impairments or color blindness.
            </p>
          </AccordionItem>
          <AccordionItem name="exclusive" title="How do I make custom components accessible?">
            <p>
              To make custom components accessible, focus on these key aspects: use semantic HTML where possible,
              implement proper keyboard support, add appropriate ARIA attributes, manage focus when needed, and ensure
              adequate color contrast. Always test with screen readers and keyboard navigation. Consider using
              established design patterns from the <a href="https://www.w3.org/WAI/ARIA/apg/patterns/"
                >ARIA Authoring Practices Guide</a
              >.
            </p>
          </AccordionItem>
        </Accordion>
      </div>
    </div>
  </section>
  <section class="my-48">
    <div class="space-content container">
      <h2 class="text-6xl">Our community</h2>
      <p class="text-2xl">
        We're a community of developers who are passionate about making the web more accessible. We're always looking
        for new ways to improve the accessibility of the web.
      </p>
      <AvatarGroup display="grid" gridItemsSize="300px" gridGap="2rem">
        <Avatar initials="RJ" title="Robert Johnson" subtitle="Manager" />
        <Avatar initials="MT" title="Maria Torres" subtitle="Developer" />
        <Avatar initials="AK" title="Alex Kim" subtitle="Designer" />
        <Avatar initials="SL" title="Sarah Lee" subtitle="Content Strategist" />
        <Avatar initials="JP" title="James Peterson" subtitle="QA Engineer" />
        <Avatar initials="LW" title="Lisa Wong" subtitle="Product Owner" />
        <Avatar initials="DM" title="David Martinez" subtitle="UX Researcher" />
        <Avatar initials="EB" title="Emma Brown" subtitle="Accessibility Specialist" />
        <Avatar initials="TC" title="Thomas Chen" subtitle="Frontend Developer" />
      </AvatarGroup>
    </div>
  </section>
  <section class="mt-48 mb-32">
    <div class="container">
      <h2 class="mb-16 text-6xl">Impact in numbers</h2>
      <div class="grid grid-cols-1 gap-12 sm:grid-cols-2 md:grid-cols-4">
        <Counter count="900+" title="Stars" sub="On GitHub" />
        <Counter count="25+" title="Accessible" sub="Components" />
        <Counter count="400+" title="Commits" sub="Merged" />
        <Counter count="48+" title="Months" sub="Since launch" />
      </div>
    </div>
  </section>
</DefaultLayout>

<style>
  .avatar {
    border: 1px solid var(--border-color-subtle);
    border-radius: var(--radius-md);
    padding: var(--space-s);
  }

  .text-gradient {
    background: linear-gradient(
      315deg,
      light-dark(var(--color-primary-300), var(--color-secondary-100)) 25%,
      light-dark(var(--color-secondary-300), var(--color-primary-200))
    );
    background-clip: border-box;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  /* Case Studies Container - behält das ursprüngliche Layout bei */
  .case-studies-container {
    /* Keine spezifischen Styles nötig - die FrontpageCard Components 
       handhaben ihr eigenes Layout und Spacing */
  }

  /* Stelle sicher, dass die Cards die volle Breite nutzen */
  .case-studies-container :global(.frontpage-card) {
    width: 100%;
  }
</style>