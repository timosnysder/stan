---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import SocialShares from '@components/SocialShares.astro'
import { getCollection, render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

export async function getStaticPaths() {
  const projects = await getCollection('projects')

  const projectImages = [
    { src: '/projects/project-image-1.png' },
    { src: '/projects/project-image-2.png' },
    { src: '/projects/project-image-3.png' },
    { src: '/projects/project-image-4.png' },
    { src: '/projects/project-image-5.png' },
    { src: '/projects/project-image-6.png' },
  ]

  // Funktion um die korrekte URL zu generieren
  function getProjectUrl(projectId: string): string {
    // Entferne .mdx oder /index.md vom Ende
    const cleanId = projectId.replace(/\.(mdx|md)$/, '').replace(/\/index$/, '')
    return cleanId
  }

  // Funktion um Projekt-Image zu finden
  function getProjectImage(projectId: string, fallbackSrc: string): string {
    // Prüfe ob es ein Ordner-Projekt ist (enthält kein .mdx)
    if (!projectId.includes('.mdx')) {
      // Verwende die gleiche URL-Logik wie für die Routen
      const cleanProjectName = getProjectUrl(projectId)
      const imagePath = `/projects/${cleanProjectName}/images/`
      
      console.log(`=== PROJECT IMAGE DEBUG ===`)
      console.log(`Original ID: "${projectId}"`)
      console.log(`Clean Name: "${cleanProjectName}"`)
      
      // Projekt-spezifische Bild-Zuordnungen
      let projectImagePath = `${imagePath}main.jpg` // Default
      
      if (cleanProjectName === 'antrifttaler-kunststoff-vertrieb') {
        projectImagePath = `${imagePath}main.png`
      } else if (cleanProjectName === 'herbitt-cars') {
        projectImagePath = `${imagePath}main.png` // oder was auch immer du verwendest
      }
      // Für neue Projekte: einfach hier hinzufügen
      
      console.log(`Final Image Path: "${projectImagePath}"`)
      
      return projectImagePath
    }
    
    // Fallback für .mdx Dateien
    return fallbackSrc
  }

  return projects.map((project, index) => {
    const projectUrl = getProjectUrl(project.id)
    const projectImage = getProjectImage(project.id, projectImages[index % projectImages.length].src)
    
    const projectWithImage = {
      ...project,
      featuredImage: projectImage,
      // Ergänze fehlende Daten
      data: {
        ...project.data,
        author: project.data.author || 'Unknown Author',
        description: project.data.description || 'No description available',
      }
    }

    console.log(`=== PROJECT ROUTE DEBUG ===`)
    console.log(`Original ID: "${project.id}" → URL: "/portfolio/${projectUrl}"`)
    console.log(`Title: "${project.data.title}"`)
    console.log(`Image: ${projectImage}`)

    return {
      params: { project: projectUrl },
      props: { project: projectWithImage },
    }
  })
}

interface Props {
  project: CollectionEntry<'projects'> & { featuredImage: string }
}

const { project } = Astro.props
const { Content } = await render(project)

const author = {
  name: project.data.author || 'Unknown Author',
  image: '/projects/project-image-1.png',
  bio: 'Project Creator',
}
---

<DefaultLayout title={project.data.title} description={project.data.description} url={project.data.title}>
  <PageHeader
    title={project.data.title}
    subtitle={project.data.description}
    author={author}
    bgType="bordered"
    featuredImage={project.featuredImage}
  />
  <section class="my-12">
    <div class="narrow space-content container">
      <Content />
    </div>
  </section>
  <section class="my-12">
    <div class="narrow space-content container">
      <h2>Share this project</h2>
      <p>Like this project? Share it with your network!</p>
      <SocialShares />
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  .narrow {
    margin-inline: auto;
    max-width: 65ch;
  }
</style>