---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Card, Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { projectsWithImages, getFallbackImage, imageFileNames } from '../../config/projects.js'

// Import images directly for optimization (als Fallback)
import projectImage1 from '@assets/images/projects/project-image-1.png'
import projectImage2 from '@assets/images/projects/project-image-2.png'
import projectImage3 from '@assets/images/projects/project-image-3.png'
import projectImage4 from '@assets/images/projects/project-image-4.png'
import projectImage5 from '@assets/images/projects/project-image-5.png'
import projectImage6 from '@assets/images/projects/project-image-6.png'

export const getStaticPaths = (async ({ paginate }) => {
  const projects = await getCollection('projects')

  // Sortiere Projekte nach Datum (neueste zuerst)
  const sortedProjects = projects.sort((a, b) => {
    const dateA = a.data.date ? new Date(a.data.date).getTime() : 0
    const dateB = b.data.date ? new Date(b.data.date).getTime() : 0
    return dateB - dateA // Neueste zuerst
  })

  const fallbackImages = [projectImage1, projectImage2, projectImage3, projectImage4, projectImage5, projectImage6]

  // Funktion um die korrekte URL zu generieren
  function getProjectUrl(projectId: string): string {
    // Entferne .mdx oder /index.md vom Ende
    const cleanId = projectId.replace(/\.(mdx|md)$/, '').replace(/\/index$/, '')
    return cleanId
  }

  // Funktion um Projekt-Image zu finden
  function getProjectImage(projectId: string, fallbackImage: any): any {
    // Prüfe ob es ein Ordner-Projekt ist (enthält kein .mdx)
    if (!projectId.includes('.mdx')) {
      // Verwende die gleiche URL-Logik wie für die Routen
      const cleanProjectName = getProjectUrl(projectId)
      const imagePath = `/projects/${cleanProjectName}/images/`
      
      console.log(`=== IMAGE DEBUG ===`)
      console.log(`Original ID: "${projectId}"`)
      console.log(`Clean Name: "${cleanProjectName}"`)
      
      // Standard-Namen für das Haupt-Bild (in Prioritäts-Reihenfolge)
      const possibleImages = [
        `${imagePath}main.png`,
        `${imagePath}main.jpg`, 
        `${imagePath}index.png`,
        `${imagePath}index.jpg`,
        `${imagePath}hero.png`,
        `${imagePath}hero.jpg`,
        `${imagePath}01.png`,
        `${imagePath}01.jpg`,
        `${imagePath}1.png`,
        `${imagePath}1.jpg`
      ]
      
      // Prüfe ob dieses Projekt ein eigenes Bild hat
      if (projectsWithImages.includes(cleanProjectName)) {
        // Verwende das erste verfügbare Bild (main.png hat Priorität)
        const projectImagePath = possibleImages[0]
        console.log(`Using project-specific image: "${projectImagePath}"`)
        return projectImagePath
      } else {
        // Fallback: Verwende Bilder aus /public/projects/
        const fallbackImages = [
          '/projects/project-image-1.png',
          '/projects/project-image-2.png', 
          '/projects/project-image-3.png',
          '/projects/project-image-4.png',
          '/projects/project-image-5.png',
          '/projects/project-image-6.png'
        ]
        
        // Konsistente Zuordnung basierend auf Projekt-Name
        const hash = cleanProjectName.split('').reduce((a, b) => {
          a = ((a << 5) - a) + b.charCodeAt(0)
          return a & a
        }, 0)
        const imageIndex = Math.abs(hash) % fallbackImages.length
        const fallbackImagePath = fallbackImages[imageIndex]
        
        console.log(`No project image found, using fallback (index ${imageIndex}): "${fallbackImagePath}"`)
        return fallbackImagePath
      }
    }
    
    // Fallback für .mdx Dateien - verwende das übergebene Fallback-Image-Objekt
    return fallbackImage
  }

  // Funktion um Fallback-Daten zu ergänzen
  function addFallbackData(project: CollectionEntry<'projects'>, index: number) {
    const projectImage = getProjectImage(project.id, fallbackImages[index % fallbackImages.length])
    
    return {
      ...project,
      // Generiere die URL basierend auf der Projekt-ID
      url: getProjectUrl(project.id),
      // Verwende Projekt-spezifisches Bild oder Fallback
      featuredImage: projectImage,
      // Ergänze fehlende Daten mit Fallbacks
      data: {
        ...project.data,
        author: project.data.author || 'Unknown Author',
        description: project.data.description || 'No description available',
        categories: project.data.categories || ['Uncategorized'],
      }
    }
  }

  const projectsWithData = sortedProjects.map((project, index) => addFallbackData(project, index))

  // console.log('=== PORTFOLIO DEBUG (SORTED BY DATE) ===')
  // projectsWithData.forEach(project => {
  //   console.log(`Date: ${project.data.date ? new Date(project.data.date).toLocaleDateString('de-DE') : 'No date'} | Title: "${project.data.title}"`)
  //   console.log(`  → URL: "/portfolio/${project.url}"`)
  //   console.log(`  → Image: ${typeof project.featuredImage === 'string' ? project.featuredImage : 'Fallback Image Object'}`)
  // })

  return paginate(projectsWithData, { pageSize: 6 })
}) satisfies GetStaticPaths

interface Props {
  page: Page<CollectionEntry<'projects'> & { featuredImage: any; url: string }>
}

const { page } = Astro.props
---

<DefaultLayout
  title="Portfolio"
  description="Eine Auswahl von Projekten aus den Bereichen Produktdesign, UX/UI-Design, Webdesign, Frontend- und Backend Entwicklung und auch meinem Sozialen Engagement."
>
  <PageHeader
    title="Portfolio"
    subtitle='Eine Auswahl von Projekten aus den Bereichen Produktdesign, UX/UI-Design, Webdesign, Frontend- und Backend Entwicklung und auch meinem Sozialen Engagement.'
    bgType="bordered"
  />
  <section class="my-12">
    <div class="container">
      <!-- <p class="text-sm"><em>Project {page.start + 1} through {page.end + 1} of {page.total} total projects</em></p> -->
      <ul class="my-3 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {
          page.data.map((project) => (
            <li>
              <Card
                imageComponent={project.featuredImage}
                url={'/portfolio/' + project.url}
                title={project.data.title}
                footer={project.data.categories} 
              >
                
                {project.data.description} 
                
              </Card>
            </li>
          ))
        }
      </ul>
      <div class="mt-12 grid place-content-center">
        <Pagination
          firstPage={page.url.prev ? '/portfolio' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/portfolio/${Math.ceil(page.total / page.size)}` : null}
          currentPage={`${page.currentPage}`}
          totalPages={`${Math.ceil(page.total / page.size)}`}
          ariaLabel="Portfolio pagination"
        />
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  @use '../../assets/scss/base/mixins' as *;

  .card {
    h3 {
      margin-block-end: var(--space-xs);
      line-height: 0.75;
    }

    a {
      @include text-decoration(transparent, var(--foreground-color), 4px, 2px);
    }
    .image img{
      object-fit: contain;
    }
  }
</style>